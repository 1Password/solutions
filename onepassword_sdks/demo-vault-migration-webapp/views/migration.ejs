<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vault Migration</title>
  <link rel="stylesheet" href="/styles.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body { margin: 0; font-family: Arial, sans-serif; }
    .connection-info { text-align: center; margin-bottom: 20px; color: #ECF0F1; background-color: transparent; }
    .connection-info p { margin: 0; font-size: 1.1em; color: #2ECC71; background-color: transparent; display: inline; }
    .connection-info button { padding: 5px 10px; background-color: #9B59B6; color: #ECF0F1; border: none; border-radius: 5px; cursor: pointer; transition: background 0.3s; margin-left: 10px; vertical-align: middle; }
    .connection-info button:hover { background-color: #8E44AD; }
    .migrate-btn, .migrate-all-btn, .download-log-btn { 
      padding: 10px 20px; 
      background-color: #9B59B6; 
      color: #ECF0F1; 
      border: none; 
      border-radius: 8px; 
      cursor: pointer; 
      transition: background 0.3s, transform 0.2s; 
      margin-right: 10px; 
      font-size: 1em; 
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); 
      margin-bottom: 15px;
    }
    .migrate-btn:hover, .migrate-all-btn:hover, .download-log-btn:hover { 
      background-color: #8E44AD; 
      transform: translateY(-2px); 
    }
    .migrate-btn:active, .migrate-all-btn:active, .download-log-btn:active { 
      transform: translateY(0); 
    }
    .vault-log-btn {
      padding: 5px 10px;
      background-color: #3498DB;
      color: #ECF0F1;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s;
      font-size: 0.9em;
    }
    .vault-log-btn:hover {
      background-color: #2980B9;
    }
    .cancel-btn { 
      padding: 5px 10px; 
      background-color: #E74C3C; 
      color: #ECF0F1; 
      border: none; 
      border-radius: 5px; 
      cursor: pointer; 
      transition: background 0.3s; 
      margin-right: 10px; 
    }
    .cancel-btn:hover { background-color: #C0392B; }
    .progress-container { width: 80%; background-color: #34495E; border-radius: 5px; margin: 20px auto; height: 30px; display: none; }
    .progress-bar { width: 0%; height: 100%; background-color: #3498DB; border-radius: 5px; text-align: center; line-height: 30px; color: #ECF0F1; transition: width 0.3s ease-in-out; }
    .loading-message { text-align: center; color: #ECF0F1; margin-bottom: 10px; display: none; }
    .loading-container { text-align: center; margin-top: 20px; display: none; z-index: 10; }
    .blinking-text { color: #3498DB; font-size: 1.2em; font-weight: bold; animation: blink 1.5s infinite; }
    @keyframes blink { 0% { opacity: 1; } 50% { opacity: 0.3; } 100% { opacity: 1; } }
    .container { display: flex; height: 100vh; background-color: #2C3E50; }
    .sidebar { width: 250px; background: linear-gradient(180deg, #34495E 0%, #2C3E50 100%); color: #ECF0F1; padding-top: 20px; transition: width 0.3s; box-shadow: 2px 0 5px rgba(0, 0, 0, 0.3); }
    .sidebar h1 { color: #3498DB; font-size: 1.8em; text-align: center; margin-bottom: 30px; padding: 10px; border-bottom: 1px solid #2C3E50; }
    .sidebar ul { list-style: none; padding: 0; margin: 0; }
    .sidebar ul li { padding: 15px 20px; border-bottom: 1px solid #2C3E50; transition: background 0.3s; }
    .sidebar ul li a { color: #ECF0F1; text-decoration: none; font-size: 1.2em; display: flex; align-items: center; gap: 10px; transition: color 0.3s, transform 0.3s; }
    .sidebar ul li a:hover, .sidebar ul li a.active { color: #3498DB; transform: scale(1.05); }
    .sidebar ul li a:hover { background: rgba(52, 73, 94, 0.8); }
    .sidebar ul li a i { width: 20px; text-align: center; }
    .content { flex-grow: 1; padding: 20px; background-color: #2C3E50; color: #ECF0F1; display: flex; flex-direction: column; min-height: 100vh; }
    .content h2 { color: #3498DB; font-size: 2em; margin-bottom: 20px; text-align: center; }
    .form-container { background: rgba(52, 73, 94, 0.8); padding: 30px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); margin-bottom: 20px; max-width: 1800px; margin-left: auto; margin-right: auto; }
    .form-container h3 { color: #3498DB; margin-bottom: 25px; text-align: center; font-size: 1.8em; text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); }
    .form-container form { display: flex; flex-direction: column; gap: 25px; }
    .form-container .form-group { display: flex; flex-direction: column; gap: 8px; align-items: center; }
    .form-container label { color: #ECF0F1; font-size: 1em; font-weight: bold; }
    .form-container input { padding: 12px; border: 1px solid #34495E; border-radius: 5px; font-size: 1em; background-color: #ECF0F1; color: #2C3E50; width: 80%; min-width: 600px; max-width: 1200px; box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1); transition: border-color 0.3s; }
    .form-container input:focus { border-color: #3498DB; outline: none; }
    .form-container button { padding: 6px 12px; border: none; border-radius: 5px; font-size: 0.9em; background-color: #9B59B6; color: #ECF0F1; cursor: pointer; transition: background 0.3s; width: 40%; min-width: 300px; max-width: 600px; margin: 0 auto; }
    .form-container button:hover { background-color: #8E44AD; }
    .error { color: #E74C3C; text-align: center; margin-top: 10px; }
    .vault-list { flex-grow: 1; padding: 20px; background: rgba(52, 73, 94, 0.5); border-radius: 10px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); width: 900px; min-width: 600px; max-width: 900px; margin-left: auto; margin-right: auto; box-sizing: border-box; }
    .vault-list h3 { color: #3498DB; margin-bottom: 15px; text-align: center; }
    .vault-table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
    .vault-table th, .vault-table td { padding: 10px; text-align: left; border-bottom: 1px solid #34495E; }
    .vault-table th { background-color: #3498DB; color: #ECF0F1; }
    .vault-table tr:nth-child(even) { background-color: rgba(52, 73, 94, 0.3); }
    .vault-table tr:hover { background-color: rgba(52, 73, 94, 0.5); }
    .vault-table-container { width: 100%; max-width: 900px; margin-left: auto; margin-right: auto; box-sizing: border-box; }
    .search-container { margin-bottom: 15px; text-align: center; }
    .search-container input { padding: 8px; border: 1px solid #34495E; border-radius: 5px; font-size: 1em; background-color: #ECF0F1; color: #2C3E50; width: 50%; min-width: 300px; max-width: 500px; box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1); transition: border-color 0.3s; }
    .search-container input:focus { border-color: #3498DB; outline: none; }
    .toggle-container { text-align: center; margin-bottom: 15px; }
    .toggle-label { color: #ECF0F1; font-size: 1em; font-weight: bold; }
    .tabs { display: flex; border-bottom: 1px solid #34495E; margin-bottom: 20px; }
    .tab-button { flex: 1; padding: 10px; background-color: #34495E; color: #ECF0F1; border: none; cursor: pointer; font-size: 1em; transition: background-color 0.3s; }
    .tab-button:hover { background-color: #3E5A74; }
    .tab-button.active { background-color: #3498DB; }
    .tab-content { display: none; }
    @media (max-width: 768px) {
      .sidebar { width: 60px; }
      .sidebar h1 { font-size: 1em; writing-mode: vertical-rl; transform: rotate(180deg); margin: 20px 0; }
      .sidebar ul li { padding: 10px; }
      .sidebar ul li a { font-size: 0; }
      .sidebar ul li a i { font-size: 1.2em; }
      .content { padding: 10px; }
      .form-container { padding: 15px; }
      .form-container form { flex-direction: column; }
      .form-container input, .form-container button { width: 100%; min-width: 0; max-width: none; }
      .vault-list { width: 100%; min-width: 0; max-width: none; }
      .vault-table th, .vault-table td { padding: 5px; font-size: 0.9em; }
      .search-container input { width: 100%; min-width: 0; max-width: none; }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="sidebar">
      <h1>Vault Migration Tool</h1>
      <ul>
        <li><a href="/" class="<%= currentPage === 'welcome' ? 'active' : '' %>"><i class="fas fa-home"></i> Home</a></li>
        <li><a href="/migration" class="<%= currentPage === 'migration' ? 'active' : '' %>"><i class="fas fa-exchange-alt"></i> Vault Migration</a></li>
      </ul>
    </div>
    <div class="content">
      <% if (error) { %>
        <p class="error"><%= error %></p>
      <% } %>

      <div class="connection-info" id="connection-info" style="display: none;">
        <p id="connection-status">Source and Destination accounts connected</p>
        <button onclick="editTokens()">Edit</button>
      </div>
      <div class="form-container" id="migration-form-container">
        <h3>Migration Setup</h3>
        <form id="migration-form">
          <div class="form-group">
            <label for="sourceToken">1Password Source Tenant Service Token</label>
            <input type="password" id="sourceToken" name="sourceToken" placeholder="Enter source tenant service token" required>
          </div>
          <div class="form-group">
            <label for="destToken">1Password Destination Tenant Service Token</label>
            <input type="password" id="destToken" name="destToken" placeholder="Enter destination tenant service token" required>
          </div>
          <button type="submit">Connect</button>
        </form>
        <div class="loading-container" id="connect-loading">
          <p class="blinking-text">Connecting...</p>
        </div>
        <p class="error" id="connect-error"></p>
      </div>
      <div class="vault-list" id="source-vaults-list" style="display: none;">
        <div class="tabs">
          <button class="tab-button active" onclick="showTab('migrate-selected')">Migrate Selected Vaults</button>
          <button class="tab-button" onclick="showTab('migrate-all')">Migrate All Vaults</button>
          <button class="tab-button" onclick="showTab('migrated')">Migrated Vaults</button>
        </div>

        <!-- Migrate Selected Vaults Tab -->
        <div id="migrate-selected" class="tab-content" style="display: block;">
          <h3>Source Vaults</h3>
          <div class="vault-table-container">
            <div class="search-container">
              <input type="text" id="vault-search" placeholder="Search vaults by name..." />
            </div>
            <div class="toggle-container">
              <label class="toggle-label">
                <input type="checkbox" id="show-migrated-selected"> Show Migrated Vaults
              </label>
            </div>
            <button onclick="migrateSelectedVaults()" class="migrate-btn">Migrate Selected Vaults</button>
            <div class="progress-container" id="migrate-progress-selected" style="display: none;">
              <div class="progress-bar" id="migrate-progress-bar-selected">0%</div>
            </div>
            <div class="loading-message" id="migrate-loading-message-selected" style="display: none;">
              <span class="blinking-text">Migrating vaults...</span>
              <button onclick="cancelMigration()" class="cancel-btn">Cancel</button>
            </div>
            <table class="vault-table">
              <thead>
                <tr>
                  <th><input type="checkbox" id="select-all-vaults"></th>
                  <th>Name</th>
                  <th>ID</th>
                  <th>Item Count</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody id="source-vault-table-body"></tbody>
            </table>
          </div>
        </div>

        <!-- Migrate All Vaults Tab -->
        <div id="migrate-all" class="tab-content" style="display: none;">
          <h3>All Source Vaults</h3>
          <div class="vault-table-container">
            <div class="search-container">
              <input type="text" id="vault-search-all" placeholder="Search vaults by name..." />
            </div>
            <div class="toggle-container">
              <label class="toggle-label">
                <input type="checkbox" id="show-migrated-all"> Show Migrated Vaults
              </label>
            </div>
            <button onclick="migrateAllVaults()" class="migrate-all-btn">Migrate All Vaults</button>
            <div class="progress-container" id="migrate-progress-all" style="display: none;">
              <div class="progress-bar" id="migrate-progress-bar-all">0%</div>
            </div>
            <div class="loading-message" id="migrate-loading-message-all" style="display: none;">
              <span class="blinking-text">Migrating vaults...</span>
              <button onclick="cancelMigration()" class="cancel-btn">Cancel</button>
            </div>
            <table class="vault-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>ID</th>
                  <th>Item Count</th>
                  <th>Status</th>
                </tr>
              </thead>
              <tbody id="source-vault-table-body-all"></tbody>
            </table>
          </div>
        </div>

        <!-- Migrated Vaults Tab -->
        <div id="migrated" class="tab-content" style="display: none;">
          <h3>Migrated Vaults</h3>
          <div class="vault-table-container">
            <button onclick="downloadLog()" class="download-log-btn">Download All Logs</button>
            <table class="vault-table">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>ID</th>
                  <th>Item Count</th>
                  <th>Status</th>
                  <th>Vault Log</th>
                </tr>
              </thead>
              <tbody id="migrated-vault-table-body"></tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Variables to track vaults and migration state
    let allVaults = [];
    let selectedVaults = new Set();
    let migratedVaults = new Set();
    let isMigrationRunning = false;

    // Handle form submission to connect to 1Password
    document.getElementById('migration-form').addEventListener('submit', async (event) => {
      event.preventDefault();
      const formData = new FormData(event.target);
      const data = Object.fromEntries(formData);

      sessionStorage.setItem('sourceToken', data.sourceToken);
      sessionStorage.setItem('destToken', data.destToken);

      const loadingContainer = document.getElementById('connect-loading');
      const connectError = document.getElementById('connect-error');
      loadingContainer.style.display = 'block';
      await new Promise(resolve => setTimeout(resolve, 0));
      connectError.textContent = '';

      const startTime = Date.now();
      try {
        const response = await fetch('/migration/list-vaults', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ serviceToken: data.sourceToken })
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || `Server error: ${response.status}`);
        }

        const result = await response.json();
        if (result.success) {
          document.getElementById('migration-form-container').style.display = 'none';
          document.getElementById('connection-info').style.display = 'block';
          const sourceVaultsList = document.getElementById('source-vaults-list');
          const sourceVaultTableBody = document.getElementById('source-vault-table-body');
          const sourceVaultTableBodyAll = document.getElementById('source-vault-table-body-all');
          sourceVaultsList.style.display = 'block';
          sourceVaultTableBody.innerHTML = '';
          sourceVaultTableBodyAll.innerHTML = '';

          if (result.vaults && result.vaults.length > 0) {
            allVaults = result.vaults;
            renderVaults(allVaults);
            renderVaultsAll(allVaults);

            // Select all vaults checkbox handler
            document.getElementById('select-all-vaults').addEventListener('change', (event) => {
              const isChecked = event.target.checked;
              const vaultCheckboxes = document.querySelectorAll('.vault-checkbox');
              vaultCheckboxes.forEach(checkbox => {
                if (checkbox.closest('tr').style.display !== 'none' && !checkbox.disabled) {
                  checkbox.checked = isChecked;
                  const vaultId = checkbox.dataset.vaultId;
                  if (isChecked) {
                    selectedVaults.add(vaultId);
                  } else {
                    selectedVaults.delete(vaultId);
                  }
                }
              });
            });

            // Search filter for selected vaults
            document.getElementById('vault-search').addEventListener('input', (event) => {
              const searchTerm = event.target.value.trim().toLowerCase();
              const showMigrated = document.getElementById('show-migrated-selected').checked;
              const filteredVaults = allVaults.filter(vault =>
                vault.name.toLowerCase().includes(searchTerm) && (showMigrated || !migratedVaults.has(vault.id))
              );
              renderVaults(filteredVaults);
            });

            // Search filter for all vaults
            document.getElementById('vault-search-all').addEventListener('input', (event) => {
              const searchTerm = event.target.value.trim().toLowerCase();
              const showMigrated = document.getElementById('show-migrated-all').checked;
              const filteredVaults = allVaults.filter(vault =>
                vault.name.toLowerCase().includes(searchTerm) && (showMigrated || !migratedVaults.has(vault.id))
              );
              renderVaultsAll(filteredVaults);
            });

            // Toggle migrated vaults in selected tab
            document.getElementById('show-migrated-selected').addEventListener('change', () => {
              const searchTerm = document.getElementById('vault-search').value.trim().toLowerCase();
              const showMigrated = document.getElementById('show-migrated-selected').checked;
              const filteredVaults = allVaults.filter(vault =>
                vault.name.toLowerCase().includes(searchTerm) && (showMigrated || !migratedVaults.has(vault.id))
              );
              renderVaults(filteredVaults);
            });

            // Toggle migrated vaults in all tab
            document.getElementById('show-migrated-all').addEventListener('change', () => {
              const searchTerm = document.getElementById('vault-search-all').value.trim().toLowerCase();
              const showMigrated = document.getElementById('show-migrated-all').checked;
              const filteredVaults = allVaults.filter(vault =>
                vault.name.toLowerCase().includes(searchTerm) && (showMigrated || !migratedVaults.has(vault.id))
              );
              renderVaultsAll(filteredVaults);
            });
          } else {
            sourceVaultTableBody.innerHTML = '<tr><td colspan="5">No vaults found in the source tenant.</td></tr>';
            sourceVaultTableBodyAll.innerHTML = '<tr><td colspan="4">No vaults found in the source tenant.</td></tr>';
          }
        }
      } catch (error) {
        connectError.textContent = `Failed to connect: ${error.message}`;
      } finally {
        const elapsedTime = Date.now() - startTime;
        const remainingTime = 1000 - elapsedTime;
        if (remainingTime > 0) {
          await new Promise(resolve => setTimeout(resolve, remainingTime));
        }
        loadingContainer.style.display = 'none';
      }
    });

    // Switch between tabs
    function showTab(tabId) {
      document.querySelectorAll('.tab-content').forEach(tab => {
        tab.style.display = 'none';
      });
      document.querySelectorAll('.tab-button').forEach(button => {
        button.classList.remove('active');
      });
      document.getElementById(tabId).style.display = 'block';
      document.querySelector(`button[onclick="showTab('${tabId}')"]`).classList.add('active');
    }

    // Show the form again to edit tokens
    function editTokens() {
      document.getElementById('migration-form-container').style.display = 'block';
      document.getElementById('connection-info').style.display = 'none';
      document.getElementById('source-vaults-list').style.display = 'none';
    }

    // Download accumulated migration log
    function downloadLog() {
      window.location.href = '/migration/download-log';
    }

    // Render vaults in the "Migrate Selected" tab
    function renderVaults(vaults) {
      const sourceVaultTableBody = document.getElementById('source-vault-table-body');
      sourceVaultTableBody.innerHTML = '';

      const showMigrated = document.getElementById('show-migrated-selected').checked;
      const filteredVaults = vaults.filter(vault => showMigrated || !migratedVaults.has(vault.id));
      if (filteredVaults.length > 0) {
        filteredVaults.forEach(vault => {
          const row = document.createElement('tr');
          const isMigrated = migratedVaults.has(vault.id);
          row.innerHTML = `
            <td><input type="checkbox" class="vault-checkbox" data-vault-id="${vault.id}" data-vault-name="${vault.name}" ${selectedVaults.has(vault.id) ? 'checked' : ''} ${isMigrated ? 'disabled' : ''}></td>
            <td>${vault.name}</td>
            <td>${vault.id}</td>
            <td>${vault.itemCount}</td>
            <td><span id="migration-status-${vault.id}" style="color: ${isMigrated ? '#2ECC71' : ''};">${isMigrated ? 'Migrated' : ''}</span></td>
          `;
          sourceVaultTableBody.appendChild(row);
        });
        document.querySelectorAll('.vault-checkbox').forEach(checkbox => {
          checkbox.addEventListener('change', (e) => {
            const vaultId = e.target.dataset.vaultId;
            if (e.target.checked) {
              selectedVaults.add(vaultId);
            } else {
              selectedVaults.delete(vaultId);
            }
          });
        });
      } else {
        sourceVaultTableBody.innerHTML = '<tr><td colspan="5">No vaults match your search.</td></tr>';
      }

      document.getElementById('select-all-vaults').checked = false;
    }

    // Render vaults in the "Migrate All" tab
    function renderVaultsAll(vaults) {
      const sourceVaultTableBodyAll = document.getElementById('source-vault-table-body-all');
      sourceVaultTableBodyAll.innerHTML = '';

      const showMigrated = document.getElementById('show-migrated-all').checked;
      const filteredVaults = vaults.filter(vault => showMigrated || !migratedVaults.has(vault.id));
      if (filteredVaults.length > 0) {
        filteredVaults.forEach(vault => {
          const row = document.createElement('tr');
          const isMigrated = migratedVaults.has(vault.id);
          row.innerHTML = `
            <td>${vault.name}</td>
            <td>${vault.id}</td>
            <td>${vault.itemCount}</td>
            <td><span id="migration-status-${vault.id}" style="color: ${isMigrated ? '#2ECC71' : ''};">${isMigrated ? 'Migrated' : ''}</span></td>
          `;
          sourceVaultTableBodyAll.appendChild(row);
        });
      } else {
        sourceVaultTableBodyAll.innerHTML = '<tr><td colspan="4">No vaults match your search.</td></tr>';
      }
    }

    // Render migrated vaults in the "Migrated" tab
    function renderMigratedVaults() {
      const migratedVaultTableBody = document.getElementById('migrated-vault-table-body');
      migratedVaultTableBody.innerHTML = '';

      const migratedVaultList = allVaults.filter(vault => migratedVaults.has(vault.id));
      if (migratedVaultList.length > 0) {
        migratedVaultList.forEach(vault => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${vault.name}</td>
            <td>${vault.id}</td>
            <td>${vault.itemCount}</td>
            <td><span id="migration-status-${vault.id}" style="color: #2ECC71;">Migration successful!</span></td>
            <td><button class="vault-log-btn" onclick="window.location.href='/migration/download-vault-log/${vault.id}'">Download Vault Log</button></td>
          `;
          migratedVaultTableBody.appendChild(row);
        });
      } else {
        migratedVaultTableBody.innerHTML = '<tr><td colspan="5">No vaults have been migrated yet.</td></tr>';
      }
    }

    // Show errors for failed items in a vault
    function showItemErrors(vaultId, vaultResults) {
      const statusElement = document.getElementById(`migration-status-${vaultId}`);
      if (vaultResults && vaultResults.length > 0) {
        const failedItems = vaultResults.filter(result => !result.success);
        if (failedItems.length > 0) {
          statusElement.innerHTML = `Failed items: ${failedItems.length}. <button onclick="alert('Failed items:\\n${failedItems.map(item => item.title + ': ' + item.error).join('\\n')}')">Details</button>`;
          statusElement.style.color = '#E74C3C';
        }
      }
    }

    // Cancel an ongoing migration
    async function cancelMigration() {
      if (!isMigrationRunning) return;

      try {
        const response = await fetch('/migration/cancel', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        const result = await response.json();
        if (result.success) {
          document.querySelector('.error').textContent = 'Migration cancelled by user.';
        } else {
          document.querySelector('.error').textContent = 'Failed to cancel migration: ' + result.message;
        }
      } catch (error) {
        document.querySelector('.error').textContent = 'Error cancelling migration: ' + error.message;
      }
    }

    // Migrate selected vaults
    async function migrateSelectedVaults() {
      const checkboxes = document.querySelectorAll('.vault-checkbox:checked');
      const selectedVaultsList = Array.from(checkboxes).map(cb => ({
        vaultId: cb.dataset.vaultId,
        vaultName: cb.dataset.vaultName
      }));

      if (selectedVaultsList.length === 0) {
        document.querySelector('.error').textContent = 'Please select at least one vault to migrate.';
        return;
      }

      const totalVaults = selectedVaultsList.length;
      const progressContainer = document.getElementById('migrate-progress-selected');
      const progressBar = document.getElementById('migrate-progress-bar-selected');
      const loadingMessage = document.getElementById('migrate-loading-message-selected');

      progressContainer.style.display = 'block';
      loadingMessage.style.display = 'block';
      progressBar.style.width = '0%';
      progressBar.textContent = '0%';
      isMigrationRunning = true;

      const sourceToken = sessionStorage.getItem('sourceToken');
      const destToken = sessionStorage.getItem('destToken');
      const url = `/migration/migrate-all-vaults?sourceToken=${encodeURIComponent(sourceToken)}&destToken=${encodeURIComponent(destToken)}&vaults=${encodeURIComponent(JSON.stringify(selectedVaultsList))}`;
      const source = new EventSource(url);

      source.onopen = () => {};

      source.onmessage = (event) => {
        const data = JSON.parse(event.data);
        if (data.progress) {
          progressBar.style.width = `${Math.round(data.progress)}%`;
          progressBar.textContent = `${Math.round(data.progress)}%`;
          const statusElement = document.getElementById(`migration-status-${data.outcome.vaultId}`);
          if (data.outcome.success) {
            statusElement.textContent = 'Migration successful!';
            statusElement.style.color = '#2ECC71';
            migratedVaults.add(data.outcome.vaultId);
            showItemErrors(data.outcome.vaultId, data.outcome.results);
          } else {
            statusElement.textContent = `Failed: ${data.outcome.message}`;
            statusElement.style.color = '#E74C3C';
          }
        }
        if (data.finished) {
          if (!data.success) {
            document.querySelector('.error').textContent = data.message;
          }
          renderVaults(allVaults);
          renderVaultsAll(allVaults);
          renderMigratedVaults();
          progressContainer.style.display = 'none';
          loadingMessage.style.display = 'none';
          isMigrationRunning = false;
          source.close();
        }
      };

      source.onerror = () => {
        document.querySelector('.error').textContent = 'Error during migration. Check server logs for details.';
        progressContainer.style.display = 'none';
        loadingMessage.style.display = 'none';
        isMigrationRunning = false;
        source.close();
      };
    }

    // Migrate all vaults
    async function migrateAllVaults() {
      const sourceVaultTableBodyAll = document.getElementById('source-vault-table-body-all');
      const rows = sourceVaultTableBodyAll.getElementsByTagName('tr');
      const totalVaults = rows.length;

      // Check if there are any non-migrated vaults in the visible list
      let hasNonMigratedVaults = false;
      for (let i = 0; i < rows.length; i++) {
        const statusElement = rows[i].querySelector(`span[id^="migration-status-"]`);
        if (statusElement && statusElement.textContent !== 'Migrated') {
          hasNonMigratedVaults = true;
          break;
        }
      }

      if (totalVaults === 0 || !hasNonMigratedVaults) {
        document.querySelector('.error').textContent = 'No non-migrated vaults available to migrate.';
        return;
      }

      const progressContainer = document.getElementById('migrate-progress-all');
      const progressBar = document.getElementById('migrate-progress-bar-all');
      const loadingMessage = document.getElementById('migrate-loading-message-all');

      progressContainer.style.display = 'block';
      loadingMessage.style.display = 'block';
      progressBar.style.width = '0%';
      progressBar.textContent = '0%';
      isMigrationRunning = true;

      const sourceToken = sessionStorage.getItem('sourceToken');
      const destToken = sessionStorage.getItem('destToken');
      const url = `/migration/migrate-all-vaults?sourceToken=${encodeURIComponent(sourceToken)}&destToken=${encodeURIComponent(destToken)}`;
      const source = new EventSource(url);

      source.onopen = () => {};

      source.onmessage = (event) => {
        const data = JSON.parse(event.data);
        if (data.progress) {
          progressBar.style.width = `${Math.round(data.progress)}%`;
          progressBar.textContent = `${Math.round(data.progress)}%`;
          const statusElement = document.getElementById(`migration-status-${data.outcome.vaultId}`);
          if (data.outcome.success) {
            statusElement.textContent = 'Migration successful!';
            statusElement.style.color = '#2ECC71';
            migratedVaults.add(data.outcome.vaultId);
            showItemErrors(data.outcome.vaultId, data.outcome.results);
          } else {
            statusElement.textContent = `Failed: ${data.outcome.message}`;
            statusElement.style.color = '#E74C3C';
          }
        }
        if (data.finished) {
          if (!data.success) {
            document.querySelector('.error').textContent = data.message;
          }
          renderVaults(allVaults);
          renderVaultsAll(allVaults);
          renderMigratedVaults();
          progressContainer.style.display = 'none';
          loadingMessage.style.display = 'none';
          isMigrationRunning = false;
          source.close();
        }
      };

      source.onerror = () => {
        document.querySelector('.error').textContent = 'Error during migration. Check server logs for details.';
        progressContainer.style.display = 'none';
        loadingMessage.style.display = 'none';
        isMigrationRunning = false;
        source.close();
      };
    }
  </script>
</body>
</html>