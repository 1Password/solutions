"use strict";
// Code generated by op-codegen - DO NOT EDIT MANUALLY
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Items_inner;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Items = void 0;
const iterator_js_1 = require("./iterator.js");
const types_js_1 = require("./types.js");
const items_shares_js_1 = require("./items_shares.js");
const items_files_js_1 = require("./items_files.js");
class Items {
    constructor(inner) {
        _Items_inner.set(this, void 0);
        __classPrivateFieldSet(this, _Items_inner, inner, "f");
        this.shares = new items_shares_js_1.ItemsShares(inner);
        this.files = new items_files_js_1.ItemsFiles(inner);
    }
    /**
     * Create a new item.
     */
    create(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const invocationConfig = {
                invocation: {
                    clientId: __classPrivateFieldGet(this, _Items_inner, "f").id,
                    parameters: {
                        name: "ItemsCreate",
                        parameters: {
                            params,
                        },
                    },
                },
            };
            return JSON.parse(yield __classPrivateFieldGet(this, _Items_inner, "f").core.invoke(invocationConfig), types_js_1.ReviverFunc);
        });
    }
    /**
     * Get an item by vault and item ID
     */
    get(vaultId, itemId) {
        return __awaiter(this, void 0, void 0, function* () {
            const invocationConfig = {
                invocation: {
                    clientId: __classPrivateFieldGet(this, _Items_inner, "f").id,
                    parameters: {
                        name: "ItemsGet",
                        parameters: {
                            vault_id: vaultId,
                            item_id: itemId,
                        },
                    },
                },
            };
            return JSON.parse(yield __classPrivateFieldGet(this, _Items_inner, "f").core.invoke(invocationConfig), types_js_1.ReviverFunc);
        });
    }
    /**
     * Update an existing item.
     */
    put(item) {
        return __awaiter(this, void 0, void 0, function* () {
            const invocationConfig = {
                invocation: {
                    clientId: __classPrivateFieldGet(this, _Items_inner, "f").id,
                    parameters: {
                        name: "ItemsPut",
                        parameters: {
                            item,
                        },
                    },
                },
            };
            return JSON.parse(yield __classPrivateFieldGet(this, _Items_inner, "f").core.invoke(invocationConfig), types_js_1.ReviverFunc);
        });
    }
    /**
     * Delete an item.
     */
    delete(vaultId, itemId) {
        return __awaiter(this, void 0, void 0, function* () {
            const invocationConfig = {
                invocation: {
                    clientId: __classPrivateFieldGet(this, _Items_inner, "f").id,
                    parameters: {
                        name: "ItemsDelete",
                        parameters: {
                            vault_id: vaultId,
                            item_id: itemId,
                        },
                    },
                },
            };
            yield __classPrivateFieldGet(this, _Items_inner, "f").core.invoke(invocationConfig);
        });
    }
    /**
     * Archive an item.
     */
    archive(vaultId, itemId) {
        return __awaiter(this, void 0, void 0, function* () {
            const invocationConfig = {
                invocation: {
                    clientId: __classPrivateFieldGet(this, _Items_inner, "f").id,
                    parameters: {
                        name: "ItemsArchive",
                        parameters: {
                            vault_id: vaultId,
                            item_id: itemId,
                        },
                    },
                },
            };
            yield __classPrivateFieldGet(this, _Items_inner, "f").core.invoke(invocationConfig);
        });
    }
    /**
     * List all items
     */
    listAll(vaultId) {
        return __awaiter(this, void 0, void 0, function* () {
            const invocationConfig = {
                invocation: {
                    clientId: __classPrivateFieldGet(this, _Items_inner, "f").id,
                    parameters: {
                        name: "ItemsListAll",
                        parameters: {
                            vault_id: vaultId,
                        },
                    },
                },
            };
            return new iterator_js_1.SdkIterable(JSON.parse(yield __classPrivateFieldGet(this, _Items_inner, "f").core.invoke(invocationConfig), types_js_1.ReviverFunc));
        });
    }
}
exports.Items = Items;
_Items_inner = new WeakMap();
