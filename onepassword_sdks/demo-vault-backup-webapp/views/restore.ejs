<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Restore Vaults</title>
  <link rel="stylesheet" href="/styles.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body { margin: 0; font-family: Arial, sans-serif; }
    .connection-info { text-align: center; margin-bottom: 20px; color: #ECF0F1; background-color: transparent; }
    .connection-info p { margin: 0; font-size: 1.1em; color: #2ECC71; background-color: transparent; }
    .connection-info button { padding: 5px 10px; background-color: #9B59B6; color: #ECF0F1; border: none; border-radius: 5px; cursor: pointer; transition: background 0.3s; margin-left: 10px; }
    .connection-info button:hover { background-color: #8E44AD; }
    .restore-btn { padding: 5px 10px; background-color: #9B59B6; color: #ECF0F1; border: none; border-radius: 5px; cursor: pointer; transition: background 0.3s; margin-right: 10px; }
    .restore-btn:hover { background-color: #8E44AD; }
    .progress-container { width: 80%; background-color: #34495E; border-radius: 5px; margin: 20px auto; height: 30px; display: none; }
    .progress-bar { width: 0%; height: 100%; background-color: #3498DB; border-radius: 5px; text-align: center; line-height: 30px; color: #ECF0F1; transition: width 0.3s ease-in-out; }
    .loading-message { text-align: center; color: #ECF0F1; margin-bottom: 10px; display: none; }
    .container { display: flex; height: 100vh; background-color: #2C3E50; }
    .sidebar { width: 250px; background: linear-gradient(180deg, #34495E 0%, #2C3E50 100%); color: #ECF0F1; padding-top: 20px; transition: width 0.3s; box-shadow: 2px 0 5px rgba(0, 0, 0, 0.3); }
    .sidebar h1 { color: #3498DB; font-size: 1.8em; text-align: center; margin-bottom: 30px; padding: 10px; border-bottom: 1px solid #2C3E50; }
    .sidebar ul { list-style: none; padding: 0; margin: 0; }
    .sidebar ul li { padding: 15px 20px; border-bottom: 1px solid #2C3E50; transition: background 0.3s; }
    .sidebar ul li a { color: #ECF0F1; text-decoration: none; font-size: 1.2em; display: flex; align-items: center; gap: 10px; transition: color 0.3s, transform 0.3s; }
    .sidebar ul li a:hover, .sidebar ul li a.active { color: #3498DB; transform: scale(1.05); }
    .sidebar ul li a:hover { background: rgba(52, 73, 94, 0.8); }
    .sidebar ul li a i { width: 20px; text-align: center; }
    .content { flex-grow: 1; padding: 20px; background-color: #2C3E50; color: #ECF0F1; display: flex; flex-direction: column; min-height: 100vh; }
    .content h2 { color: #3498DB; font-size: 2em; margin-bottom: 20px; text-align: center; }
    .form-container { background: rgba(52, 73, 94, 0.8); padding: 30px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); margin-bottom: 20px; max-width: 1800px; margin-left: auto; margin-right: auto; }
    .form-container h3 { color: #3498DB; margin-bottom: 25px; text-align: center; font-size: 1.8em; text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); }
    .form-container form { display: flex; flex-direction: column; gap: 25px; }
    .form-container .form-group { display: flex; flex-direction: column; gap: 8px; align-items: center; }
    .form-container label { color: #ECF0F1; font-size: 1em; font-weight: bold; }
    .form-container input { padding: 12px; border: 1px solid #34495E; border-radius: 5px; font-size: 1em; background-color: #ECF0F1; color: #2C3E50; width: 80%; min-width: 600px; max-width: 1200px; box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1); transition: border-color 0.3s; }
    .form-container input:focus { border-color: #3498DB; outline: none; }
    .form-container button { padding: 6px 12px; border: none; border-radius: 5px; font-size: 0.9em; background-color: #9B59B6; color: #ECF0F1; cursor: pointer; transition: background 0.3s; width: 40%; min-width: 300px; max-width: 600px; margin: 0 auto; }
    .form-container button:hover { background-color: #8E44AD; }
    .form-container .toggle-btn { padding: 6px 12px; border: none; border-radius: 5px; font-size: 0.9em; background-color: #9B59B6; color: #ECF0F1; cursor: pointer; transition: background 0.3s; width: 40%; min-width: 200px; max-width: 300px; margin: 10px auto; display: block; }
    .form-container .toggle-btn:hover { background-color: #8E44AD; }
    .error { color: #E74C3C; text-align: center; margin-top: 10px; }
    .vault-list { flex-grow: 1; padding: 20px; background: rgba(52, 73, 94, 0.5); border-radius: 10px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); width: 900px; min-width: 600px; max-width: 900px; margin-left: auto; margin-right: auto; box-sizing: border-box; }
    .vault-list h3 { color: #3498DB; margin-bottom: 15px; text-align: center; }
    .vault-table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
    .vault-table th, .vault-table td { padding: 10px; text-align: left; border-bottom: 1px solid #34495E; }
    .vault-table th { background-color: #3498DB; color: #ECF0F1; }
    .vault-table tr:nth-child(even) { background-color: rgba(52, 73, 94, 0.3); }
    .vault-table tr:hover { background-color: rgba(52, 73, 94, 0.5); }
    .vault-table-container { width: 100%; max-width: 900px; margin-left: auto; margin-right: auto; box-sizing: border-box; }
    .start-restore-btn { padding: 10px 20px; border: none; border-radius: 5px; font-size: 1.2em; background-color: #9B59B6; color: #ECF0F1; cursor: pointer; transition: background 0.3s; width: 50%; min-width: 400px; max-width: 600px; margin: 20px auto; display: block; }
    .start-restore-btn:hover { background-color: #8E44AD; }
    @media (max-width: 768px) {
      .sidebar { width: 60px; }
      .sidebar h1 { font-size: 1em; writing-mode: vertical-rl; transform: rotate(180deg); margin: 20px 0; }
      .sidebar ul li { padding: 10px; }
      .sidebar ul li a { font-size: 0; }
      .sidebar ul li a i { font-size: 1.2em; }
      .content { padding: 10px; }
      .form-container { padding: 15px; }
      .form-container form { flex-direction: column; }
      .form-container input, .form-container button { width: 100%; min-width: 0; max-width: none; }
      .vault-list { width: 100%; min-width: 0; max-width: none; }
      .vault-table th, .vault-table td { padding: 5px; font-size: 0.9em; }
      .start-restore-btn { width: 100%; min-width: 0; max-width: none; }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="sidebar">
      <h1>Backup & Restore Tool</h1>
      <ul>
        <li><a href="/" class="<%= currentPage === 'welcome' ? 'active' : '' %>"><i class="fas fa-home"></i> Home</a></li>
        <li><a href="/backup" class="<%= currentPage === 'backup' ? 'active' : '' %>"><i class="fas fa-download"></i> Backup</a></li>
        <li><a href="/restore" class="<%= currentPage === 'restore' ? 'active' : '' %>"><i class="fas fa-upload"></i> Restore</a></li>
      </ul>
    </div>
    <div class="content">
      <% if (error) { %>
        <p class="error"><%= error %></p>
      <% } %>

      <div class="connection-info" id="connection-info" style="display: none;">
        <p id="connection-status">Account connected</p>
        <button onclick="editToken()">Edit</button>
      </div>
      <div class="form-container" id="restore-form-container">
        <h3>Restore Setup</h3>
        <form id="restore-form" enctype="multipart/form-data">
          <div class="form-group">
            <label for="serviceToken">1Password Service Token (Write Access)</label>
            <input type="password" id="serviceToken" name="serviceToken" placeholder="Enter service token" required>
          </div>
          <div class="form-group">
            <label for="backupFile">Backup File</label>
            <input type="file" id="backupFile" name="backupFile" accept=".1pbackup" required>
          </div>
          <div class="form-group">
            <label for="passcode">Passcode</label>
            <input type="password" id="passcode" name="passcode" placeholder="Enter your passcode" required>
            <button type="button" id="toggle-passcode-btn" class="toggle-btn" onclick="togglePasscode()">Show Passcode</button>
          </div>
          <div class="form-group">
            <label for="systemKey">System Key</label>
            <input type="password" id="systemKey" name="systemKey" placeholder="Enter the system key" required>
            <button type="button" id="toggle-system-key-btn" class="toggle-btn" onclick="toggleSystemKey()">Show System Key</button>
          </div>
          <button type="submit" id="list-vaults-btn" class="restore-btn">List Vaults</button>
        </form>
      </div>
      <div class="vault-list" id="vaults-list" style="display: none;">
        <h3>Vaults in Backup</h3>
        <div class="vault-table-container">
          <table class="vault-table">
            <thead>
              <tr>
                <th>Select</th>
                <th>Name</th>
                <th>ID</th>
                <th>Items</th>
              </tr>
            </thead>
            <tbody id="vault-table-body"></tbody>
          </table>
          <button id="restore-selected-btn" class="start-restore-btn" style="display: none;" onclick="restoreSelectedVaults()">Restore Selected Vaults</button>
        </div>
      </div>
      <div class="vault-list" id="restore-results" style="display: none;">
        <h3>Restore Results</h3>
        <div class="vault-table-container">
          <div class="progress-container" id="restore-progress" style="display: none;">
            <div class="progress-bar" id="restore-progress-bar">0%</div>
          </div>
          <div class="loading-message" id="restore-loading-message" style="display: none;">
            Restoring selected vaults...
          </div>
          <table class="vault-table">
            <thead>
              <tr>
                <th>Name</th>
                <th>ID</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody id="restore-table-body"></tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <script>
    let formDataCache = null; // Store form data for reuse

    // Step 1: List vaults from backup
    document.getElementById('restore-form').addEventListener('submit', async (event) => {
      event.preventDefault();
      const formData = new FormData(event.target);
      formDataCache = formData; // Cache for later use

      const vaultsList = document.getElementById('vaults-list');
      const vaultTableBody = document.getElementById('vault-table-body');

      try {
        const response = await fetch('/restore/list-vaults', {
          method: 'POST',
          body: formData
        });

        if (!response.ok) throw new Error((await response.json()).message || 'Server error');

        const result = await response.json();
        if (result.success) {
          document.getElementById('restore-form-container').style.display = 'none';
          document.getElementById('connection-info').style.display = 'block';
          vaultsList.style.display = 'block';
          vaultTableBody.innerHTML = '';

          result.vaults.forEach(vault => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td><input type="checkbox" name="vault" value="${vault.id}"></td>
              <td>${vault.name}</td>
              <td>${vault.id}</td>
              <td>${vault.itemCount}</td>
            `;
            vaultTableBody.appendChild(row);
          });

          document.getElementById('restore-selected-btn').style.display = 'block';
        } else {
          throw new Error(result.message);
        }
      } catch (error) {
        document.querySelector('.error').textContent = `Failed to list vaults: ${error.message}`;
      }
    });

    // Step 2: Restore selected vaults
    async function restoreSelectedVaults() {
      const selectedVaults = Array.from(document.querySelectorAll('input[name="vault"]:checked'))
        .map(checkbox => checkbox.value);
      if (selectedVaults.length === 0) {
        document.querySelector('.error').textContent = 'Please select at least one vault to restore.';
        return;
      }

      const progressContainer = document.getElementById('restore-progress');
      const progressBar = document.getElementById('restore-progress-bar');
      const loadingMessage = document.getElementById('restore-loading-message');
      const restoreResults = document.getElementById('restore-results');
      const restoreTableBody = document.getElementById('restore-table-body');

      progressContainer.style.display = 'block';
      loadingMessage.style.display = 'block';
      progressBar.style.width = '0%';
      progressBar.textContent = '0%';
      restoreResults.style.display = 'block';
      restoreTableBody.innerHTML = '';

      formDataCache.append('selectedVaults', JSON.stringify(selectedVaults));

      try {
        const response = await fetch('/restore/restore-vaults', {
          method: 'POST',
          body: formDataCache
        });

        if (!response.ok) throw new Error((await response.json()).message || 'Server error');

        const result = await response.json();
        document.getElementById('vaults-list').style.display = 'none';

        if (result.success) {
          result.results.forEach(outcome => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${outcome.vaultName}</td>
              <td>${outcome.vaultId}</td>
              <td style="color: ${outcome.success ? '#2ECC71' : '#E74C3C'}">${outcome.message}</td>
            `;
            restoreTableBody.appendChild(row);
            progressBar.style.width = `${outcome.progress}%`;
            progressBar.textContent = `${Math.round(outcome.progress)}%`;
          });
        } else {
          result.results.forEach(outcome => {
            const row = document.createElement('tr');
            row.innerHTML = `
              <td>${outcome.vaultName}</td>
              <td>${outcome.vaultId}</td>
              <td style="color: #E74C3C">${outcome.message}</td>
            `;
            restoreTableBody.appendChild(row);
            progressBar.style.width = `${outcome.progress}%`;
            progressBar.textContent = `${Math.round(outcome.progress)}%`;
          });
          throw new Error(result.message);
        }
      } catch (error) {
        document.querySelector('.error').textContent = `Failed to restore vaults: ${error.message}`;
      } finally {
        setTimeout(() => {
          progressContainer.style.display = 'none';
          loadingMessage.style.display = 'none';
        }, 1000);
      }
    }

    function editToken() {
      document.getElementById('restore-form-container').style.display = 'block';
      document.getElementById('connection-info').style.display = 'none';
      document.getElementById('vaults-list').style.display = 'none';
      document.getElementById('restore-results').style.display = 'none';
    }

    function togglePasscode() {
      const passcodeInput = document.getElementById('passcode');
      const toggleButton = document.getElementById('toggle-passcode-btn');
      if (passcodeInput.type === 'password') {
        passcodeInput.type = 'text';
        toggleButton.textContent = 'Hide Passcode';
      } else {
        passcodeInput.type = 'password';
        toggleButton.textContent = 'Show Passcode';
      }
    }

    function toggleSystemKey() {
      const systemKeyInput = document.getElementById('systemKey');
      const toggleButton = document.getElementById('toggle-system-key-btn');
      if (systemKeyInput.type === 'password') {
        systemKeyInput.type = 'text';
        toggleButton.textContent = 'Hide System Key';
      } else {
        systemKeyInput.type = 'password';
        toggleButton.textContent = 'Show System Key';
      }
    }
  </script>
</body>
</html>