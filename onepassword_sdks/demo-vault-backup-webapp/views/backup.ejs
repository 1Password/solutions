<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Backup Vaults</title>
  <link rel="stylesheet" href="/styles.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body { margin: 0; font-family: Arial, sans-serif; }
    .connection-info { text-align: center; margin-bottom: 20px; color: #ECF0F1; background-color: transparent; }
    .connection-info p { margin: 0; font-size: 1.1em; color: #2ECC71; background-color: transparent; }
    .connection-info button { padding: 5px 10px; background-color: #9B59B6; color: #ECF0F1; border: none; border-radius: 5px; cursor: pointer; transition: background 0.3s; margin-left: 10px; }
    .connection-info button:hover { background-color: #8E44AD; }
    .backup-btn { padding: 5px 10px; background-color: #9B59B6; color: #ECF0F1; border: none; border-radius: 5px; cursor: pointer; transition: background 0.3s; margin-right: 10px; }
    .backup-btn:hover { background-color: #8E44AD; }
    .progress-container { width: 80%; background-color: #34495E; border-radius: 5px; margin: 20px auto; height: 30px; display: none; }
    .progress-bar { width: 0%; height: 100%; background-color: #3498DB; border-radius: 5px; text-align: center; line-height: 30px; color: #ECF0F1; transition: width 0.3s ease-in-out; }
    .loading-message { text-align: center; color: #ECF0F1; margin-bottom: 10px; display: none; }
    .container { display: flex; min-height: 100vh; background-color: #2C3E50; }
    .sidebar { width: 250px; background: #2C3E50; color: #ECF0F1; padding-top: 20px; transition: width 0.3s; box-shadow: 2px 0 5px rgba(0, 0, 0, 0.3); }
    .sidebar h1 { color: #3498DB; font-size: 1.8em; text-align: center; margin-bottom: 30px; padding: 10px; border-bottom: 1px solid #2C3E50; }
    .sidebar ul { list-style:  none; padding: 0; margin: 0; }
    .sidebar ul li { padding: 15px 20px; border-bottom: 1px solid #2C3E50; transition: background 0.3s; }
    .sidebar ul li a { color: #ECF0F1; text-decoration: none; font-size: 1.2em; display: flex; align-items: center; gap: 10px; transition: color 0.3s, transform 0.3s; }
    .sidebar ul li a:hover, .sidebar ul li a.active { color: #3498DB; transform: scale(1.05); }
    .sidebar ul li a:hover { background: rgba(52, 73, 94, 0.8); }
    .sidebar ul li a i { width: 20px; text-align: center; }
    .content { flex-grow: 1; padding: 20px; background-color: #2C3E50; color: #ECF0F1; display: flex; flex-direction: column; min-height: 100vh; }
    .content h2 { color: #3498DB; font-size: 2em; margin-bottom: 20px; text-align: center; }
    .form-container { background: rgba(52, 73, 94, 0.8); padding: 30px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); margin-bottom: 20px; max-width: 1800px; margin-left: auto; margin-right: auto; }
    .form-container h3 { color: #3498DB; margin-bottom: 25px; text-align: center; font-size: 1.8em; text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2); }
    .form-container form { display: flex; flex-direction: column; gap: 25px; }
    .form-container .form-group { display: flex; flex-direction: column; gap: 8px; align-items: center; }
    .form-container label { color: #ECF0F1; font-size: 1em; font-weight: bold; }
    .form-container input { padding: 12px; border: 1px solid #34495E; border-radius: 5px; font-size: 1em; background-color: #ECF0F1; color: #2C3E50; width: 80%; min-width: 600px; max-width: 1200px; box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1); transition: border-color 0.3s; }
    .form-container input:focus { border-color: #3498DB; outline: none; }
    .form-container button { padding: 6px 12px; border: none; border-radius: 5px; font-size: 0.9em; background-color: #9B59B6; color: #ECF0F1; cursor: pointer; transition: background 0.3s; width: 40%; min-width: 300px; max-width: 600px; margin: 0 auto; }
    .form-container button:hover { background-color: #8E44AD; }
    .error { color: #E74C3C; text-align: center; margin-top: 10px; }
    .vault-list { flex-grow: 1; padding: 20px; background: rgba(52, 73, 94, 0.5); border-radius: 10px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); width: 900px; min-width: 600px; max-width: 900px; margin-left: auto; margin-right: auto; box-sizing: border-box; }
    .vault-list h3 { color: #3498DB; margin-bottom: 15px; text-align: center; }
    .vault-table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
    .vault-table th, .vault-table td { padding: 10px; text-align: left; border-bottom: 1px solid #34495E; }
    .vault-table th { background-color: #3498DB; color: #ECF0F1; }
    .vault-table tr:nth-child(even) { background-color: rgba(52, 73, 94, 0.3); }
    .vault-table tr:hover { background-color: rgba(52, 73, 94, 0.5); }
    .vault-table-container { width: 100%; max-width: 900px; margin-left: auto; margin-right: auto; box-sizing: border-box; }
    .search-container { margin-bottom: 15px; text-align: center; }
    .search-container input { padding: 8px; border: 1px solid #34495E; border-radius: 5px; font-size: 1em; background-color: #ECF0F1; color: #2C3E50; width: 50%; min-width: 300px; max-width: 500px; box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1); transition: border-color 0.3s; }
    .search-container input:focus { border-color: #3498DB; outline: none; }
    .passcode-section { background: rgba(52, 73, 94, 0.8); padding: 30px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); margin-bottom: 20px; max-width: 900px; margin-left: auto; margin-right: auto; display: none; }
    .passcode-section h3 { color: #3498DB; margin-bottom: 15px; text-align: center; }
    .passcode-section .form-group { display: flex; flex-direction: column; gap: 8px; align-items: center; }
    .passcode-section .form-group input[type="password"], .passcode-section .form-group input[type="text"] { width: 80%; min-width: 600px; max-width: 900px; padding: 12px; font-size: 1.2em; }
    .passcode-section .toggle-btn { padding: 6px 12px; border: none; border-radius: 5px; font-size: 0.9em; background-color: #9B59B6; color: #ECF0F1; cursor: pointer; transition: background 0.3s; width: 40%; min-width: 200px; max-width: 300px; margin: 10px auto; display: block; }
    .passcode-section .toggle-btn:hover { background-color: #8E44AD; }
    .start-backup-btn { padding: 10px 20px; border: none; border-radius: 5px; font-size: 1.2em; background-color: #9B59B6; color: #ECF0F1; cursor: pointer; transition: background 0.3s; width: 50%; min-width: 400px; max-width: 600px; margin: 20px auto; display: block; }
    .start-backup-btn:hover { background-color: #8E44AD; }
    .backup-complete { background: rgba(52, 73, 94, 0.8); padding: 20px; border-radius: 10px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); margin-bottom: 20px; max-width: 900px; margin-left: auto; margin-right: auto; display: none; }
    .backup-complete h3 { color: #3498DB; margin-bottom: 15px; text-align: center; }
    .backup-complete button { margin: 10px; }
    @media (max-width: 768px) {
      .sidebar { width: 60px; }
      .sidebar h1 { font-size: 1em; writing-mode: vertical-rl; transform: rotate(180deg); margin: 20px 0; }
      .sidebar ul li { padding: 10px; }
      .sidebar ul li a { font-size: 0; }
      .sidebar ul li a i { font-size: 1.2em; }
      .content { padding: 10px; }
      .form-container { padding: 15px; }
      .form-container form { flex-direction: column; }
      .form-container input, .form-container button { width: 100%; min-width: 0; max-width: none; }
      .vault-list { width: 100%; min-width: 0; max-width: none; }
      .vault-table th, .vault-table td { padding: 5px; font-size: 0.9em; }
      .search-container input { width: 100%; min-width: 0; max-width: none; }
      .passcode-section, .backup-complete { width: 100%; max-width: none; }
      .passcode-section .form-group input[type="password"], .passcode-section .form-group input[type="text"] { width: 100%; min-width: 0; max-width: none; }
      .start-backup-btn { width: 100%; min-width: 0; max-width: none; }
    }
  </style>
</script>
</head>
<body>
  <div class="container">
    <div class="sidebar">
      <h1>Backup & Restore Tool</h1>
      <ul>
        <li><a href="/" class="<%= currentPage === 'welcome' ? 'active' : '' %>"><i class="fas fa-home"></i> Home</a></li>
        <li><a href="/backup" class="<%= currentPage === 'backup' ? 'active' : '' %>"><i class="fas fa-download"></i> Backup</a></li>
        <li><a href="/restore" class="<%= currentPage === 'restore' ? 'active' : '' %>"><i class="fas fa-upload"></i> Restore</a></li>
      </ul>
    </div>
    <div class="content">
      <% if (error) { %>
        <p class="error"><%= error %></p>
      <% } %>

      <div class="connection-info" id="connection-info" style="display: none;">
        <p id="connection-status">Account connected</p>
        <button onclick="editToken()">Edit</button>
      </div>
      <div class="form-container" id="backup-form-container">
        <h3>Backup Setup</h3>
        <form id="backup-form">
          <div class="form-group">
            <label for="serviceToken">1Password Service Token</label>
            <input type="password" id="serviceToken" name="serviceToken" placeholder="Enter service token" required>
          </div>
          <button type="submit">List Vaults</button>
        </form>
      </div>
      <div class="vault-list" id="vaults-list" style="display: none;">
        <h3>Available Vaults</h3>
        <div class="vault-table-container">
          <div class="search-container">
            <input type="text" id="vault-search" placeholder="Search vaults by name..." />
          </div>
          <button onclick="showPasscodeSection()" class="backup-btn">Backup Selected Vaults</button>
          <div class="progress-container" id="backup-progress" style="display: none;">
            <div class="progress-bar" id="backup-progress-bar">0%</div>
          </div>
          <div class="loading-message" id="backup-loading-message" style="display: none;">
            Backing up vaults...
          </div>
          <table class="vault-table">
            <thead>
              <tr>
                <th><input type="checkbox" id="select-all-vaults"></th>
                <th>Name</th>
                <th>ID</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody id="vault-table-body"></tbody>
          </table>
          <div id="pagination-controls" style="text-align: center; margin-top: 10px;"></div>
        </div>
      </div>
      <div class="passcode-section" id="passcode-section" style="display: none;">
        <h3>Secure Your Backup</h3>
        <div class="form-group">
          <label for="passcode">Enter Passcode (minimum 8 characters)</label>
          <input type="password" id="passcode" name="passcode" required>
          <button type="button" id="toggle-passcode-btn" class="toggle-btn" onclick="togglePasscode()">Show Passcode</button>
        </div>
</div>
      <button onclick="backupSelectedVaults()" class="start-backup-btn" id="start-backup-btn" style="display: none;">Start Backup</button>
      <div class="backup-complete" id="backup-complete" style="display: none;">
        <h3>Backup Complete</h3>
        <p>Your vaults have been backed up successfully. Choose an option below:</p>
        <button onclick="downloadKeys()" class="backup-btn">Download Keys</button>
        <button onclick="saveTo1Password()" class="backup-btn">Save in 1Password</button>
        <small>(Requires service account with create vault access)</small>
      </div>
    </div>
  </div>

  <script>
    let allVaults = [];
    let backupKeys = {};
    let currentPage = 1;
    const vaultsPerPage = 25;
    let selectedVaults = new Set();

    document.getElementById('backup-form').addEventListener('submit', async (event) => {
      event.preventDefault();
      const formData = new FormData(event.target);
      const data = Object.fromEntries(formData);

      sessionStorage.setItem('serviceToken', data.serviceToken);

      try {
        const response = await fetch('/backup/list-vaults', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ serviceToken: data.serviceToken })
        });

        if (!response.ok) throw new Error((await response.json()).error || 'Server error');

        const result = await response.json();
        if (result.success) {
          document.getElementById('backup-form-container').style.display = 'none';
          document.getElementById('connection-info').style.display = 'block';
          const vaultsList = document.getElementById('vaults-list');
          const vaultTableBody = document.getElementById('vault-table-body');
          vaultsList.style.display = 'block';
          vaultTableBody.innerHTML = '';

          if (result.vaults && result.vaults.length > 0) {
            allVaults = result.vaults;
            renderVaults(allVaults);

            document.getElementById('select-all-vaults').addEventListener('change', (event) => {
              const isChecked = event.target.checked;
              document.querySelectorAll('.vault-checkbox').forEach(checkbox => {
                if (checkbox.closest('tr').style.display !== 'none') {
                  checkbox.checked = isChecked;
                  const vaultId = checkbox.dataset.vaultId;
                  if (isChecked) {
                    selectedVaults.add(vaultId);
                  } else {
                    selectedVaults.delete(vaultId);
                  }
                }
              });
            });

            document.getElementById('vault-search').addEventListener('input', (event) => {
              currentPage = 1;
              const searchTerm = event.target.value.trim().toLowerCase();
              const filteredVaults = allVaults.filter(vault => vault.name.toLowerCase().includes(searchTerm));
              renderVaults(filteredVaults);
            });
          } else {
            vaultTableBody.innerHTML = '<tr><td colspan="4">No vaults found.</td></tr>';
          }
        }
      } catch (error) {
        document.querySelector('.error').textContent = `Failed to list vaults: ${error.message}`;
      }
    });

    function editToken() {
      document.getElementById('backup-form-container').style.display = 'block';
      document.getElementById('connection-info').style.display = 'none';
      document.getElementById('vaults-list').style.display = 'none';
      document.getElementById('passcode-section').style.display = 'none';
      document.getElementById('start-backup-btn').style.display = 'none';
      document.getElementById('backup-complete').style.display = 'none';
    }

    function renderVaults(vaults) {
      const vaultTableBody = document.getElementById('vault-table-body');
      vaultTableBody.innerHTML = '';

      const start = (currentPage - 1) * vaultsPerPage;
      const end = start + vaultsPerPage;
      const paginatedVaults = vaults.slice(start, end);

      if (paginatedVaults.length > 0) {
        paginatedVaults.forEach(vault => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td><input type="checkbox" class="vault-checkbox" data-vault-id="${vault.id}" data-vault-name="${vault.name}" ${selectedVaults.has(vault.id) ? 'checked' : ''}></td>
            <td>${vault.name}</td>
            <td>${vault.id}</td>
            <td><span id="backup-status-${vault.id}"></span></td>
          `;
          vaultTableBody.appendChild(row);
        });

        document.querySelectorAll('.vault-checkbox').forEach(checkbox => {
          checkbox.addEventListener('change', (e) => {
            const vaultId = e.target.dataset.vaultId;
            if (e.target.checked) {
              selectedVaults.add(vaultId);
            } else {
              selectedVaults.delete(vaultId);
            }
          });
        });
      } else {
        vaultTableBody.innerHTML = '<tr><td colspan="4">No vaults match your search.</td></tr>';
      }
      document.getElementById('select-all-vaults').checked = false;

      const totalPages = Math.ceil(vaults.length / vaultsPerPage);
      const paginationControls = document.getElementById('pagination-controls');
      paginationControls.innerHTML = `
        <button onclick="changePage(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>Previous</button>
        <span>Page ${currentPage} of ${totalPages}</span>
        <button onclick="changePage(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>Next</button>
      `;
    }

    function changePage(page) {
      const totalPages = Math.ceil(allVaults.length / vaultsPerPage);
      if (page < 1 || page > totalPages) return;
      currentPage = page;
      const searchTerm = document.getElementById('vault-search').value.trim().toLowerCase();
      const filteredVaults = allVaults.filter(vault => vault.name.toLowerCase().includes(searchTerm));
      renderVaults(filteredVaults);
    }

    function showPasscodeSection() {
      const checkboxes = document.querySelectorAll('.vault-checkbox:checked');
      if (checkboxes.length === 0) {
        document.querySelector('.error').textContent = 'Please select at least one vault to backup.';
        return;
      }
      document.getElementById('vaults-list').style.display = 'none';
      document.getElementById('passcode-section').style.display = 'block';
      document.getElementById('start-backup-btn').style.display = 'block';
    }

    function togglePasscode() {
      const passcodeInput = document.getElementById('passcode');
      const toggleButton = document.getElementById('toggle-passcode-btn');
      if (passcodeInput.type === 'password') {
        passcodeInput.type = 'text';
        toggleButton.textContent = 'Hide Passcode';
      } else {
        passcodeInput.type = 'password';
        toggleButton.textContent = 'Show Passcode';
      }
    }

    async function backupSelectedVaults() {
      const serviceToken = sessionStorage.getItem('serviceToken');
      const passcode = document.getElementById('passcode').value;
      if (passcode.length < 8) {
        document.querySelector('.error').textContent = 'Passcode must be at least 8 characters long.';
        return;
      }

      const selectedVaults = Array.from(document.querySelectorAll('.vault-checkbox:checked'))
        .map(cb => ({ vaultId: cb.dataset.vaultId, vaultName: cb.dataset.vaultName }));

      const progressContainer = document.getElementById('backup-progress');
      const progressBar = document.getElementById('backup-progress-bar');
      const loadingMessage = document.getElementById('backup-loading-message');

      progressContainer.style.display = 'block';
      loadingMessage.style.display = 'block';
      progressBar.style.width = '0%';
      progressBar.textContent = '0%';

      try {
        const response = await fetch('/backup/backup-vaults', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ serviceToken, vaults: selectedVaults, passcode })
        });

        const result = await response.json();
        if (result.success) {
          progressBar.style.width = '100%';
          progressBar.textContent = '100%';
          selectedVaults.forEach(vault => {
            const statusElement = document.getElementById(`backup-status-${vault.vaultId}`);
            statusElement.textContent = 'Backup successful!';
            statusElement.style.color = '#2ECC71';
          });

          backupKeys = { systemKey: result.systemKey, passcode: result.passcode };
          document.getElementById('passcode-section').style.display = 'none';
          document.getElementById('start-backup-btn').style.display = 'none';
          document.getElementById('backup-complete').style.display = 'block';

          const link = document.createElement('a');
          link.href = result.filePath;
          link.download = 'backup.1pbackup';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        } else {
          throw new Error(result.message);
        }
      } catch (error) {
        document.querySelector('.error').textContent = `Failed to backup vaults: ${error.message}`;
      } finally {
        setTimeout(() => {
          progressContainer.style.display = 'none';
          loadingMessage.style.display = 'none';
        }, 1000);
      }
    }

    function downloadKeys() {
      const content = `Backup Keys\nPasscode: ${backupKeys.passcode}\nSystem Key: ${backupKeys.systemKey}`;
      const blob = new Blob([content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'backup-keys.txt';
      a.click();
      URL.revokeObjectURL(url);
    }

    async function saveTo1Password() {
      const serviceToken = sessionStorage.getItem('serviceToken');
      try {
        const response = await fetch('/backup/save-keys', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ serviceToken, systemKey: backupKeys.systemKey, passcode: backupKeys.passcode })
        });
        const result = await response.json();
        if (!result.success) throw new Error(result.message);
        alert('Keys saved to 1Password successfully');
      } catch (error) {
        alert('Failed to save keys to 1Password: ' + error.message);
      }
    }
  </script>
</body>
</html>