"use strict";
// Code generated by op-codegen - DO NOT EDIT MANUALLY
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Secrets_inner;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secrets = void 0;
const core_js_1 = require("./core.js");
const types_js_1 = require("./types.js");
class Secrets {
    constructor(inner) {
        _Secrets_inner.set(this, void 0);
        __classPrivateFieldSet(this, _Secrets_inner, inner, "f");
    }
    /**
     * Resolve returns the secret the provided secret reference points to.
     */
    resolve(secretReference) {
        return __awaiter(this, void 0, void 0, function* () {
            const invocationConfig = {
                invocation: {
                    clientId: __classPrivateFieldGet(this, _Secrets_inner, "f").id,
                    parameters: {
                        name: "SecretsResolve",
                        parameters: {
                            secret_reference: secretReference,
                        },
                    },
                },
            };
            return JSON.parse(yield __classPrivateFieldGet(this, _Secrets_inner, "f").core.invoke(invocationConfig), types_js_1.ReviverFunc);
        });
    }
    /**
     * Resolve takes in a list of secret references and returns the secrets they point to or errors if any.
     */
    resolveAll(secretReferences) {
        return __awaiter(this, void 0, void 0, function* () {
            const invocationConfig = {
                invocation: {
                    clientId: __classPrivateFieldGet(this, _Secrets_inner, "f").id,
                    parameters: {
                        name: "SecretsResolveAll",
                        parameters: {
                            secret_references: secretReferences,
                        },
                    },
                },
            };
            return JSON.parse(yield __classPrivateFieldGet(this, _Secrets_inner, "f").core.invoke(invocationConfig), types_js_1.ReviverFunc);
        });
    }
    /**
     * Validate the secret reference to ensure there are no syntax errors.
     */
    static validateSecretReference(secretReference) {
        const sharedCore = new core_js_1.SharedCore();
        const invocationConfig = {
            invocation: {
                parameters: {
                    name: "ValidateSecretReference",
                    parameters: {
                        secret_reference: secretReference,
                    },
                },
            },
        };
        sharedCore.invoke_sync(invocationConfig);
    }
    static generatePassword(recipe) {
        const sharedCore = new core_js_1.SharedCore();
        const invocationConfig = {
            invocation: {
                parameters: {
                    name: "GeneratePassword",
                    parameters: {
                        recipe,
                    },
                },
            },
        };
        return JSON.parse(sharedCore.invoke_sync(invocationConfig), types_js_1.ReviverFunc);
    }
}
exports.Secrets = Secrets;
_Secrets_inner = new WeakMap();
