services:
  # Define the web application service
  webapp:
    # Build the Docker image using the Dockerfile in the current directory (.)
    build: .
    networks: [op-connect]
    depends_on: [api, sync]
    # Name the container for easier identification
    container_name: op_connect_webapp_service
    # Map port 5000 on the host machine to port 5000 inside the container
    # This makes the web app accessible via http://localhost:5000
    ports:
      - "5001:5000"
    # Define environment variables needed by the Flask application (app.py)
    # It's highly recommended to use a .env file for secrets
    environment:
      # These variables will be read from a .env file in the same directory
      # or from your host machine's environment variables if the .env file is missing/incomplete
      - OP_CONNECT_HOST=http://api:8080 # The host and port of the Connect API
      - OP_VAULT_UUID=${OP_VAULT_UUID}
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY} # Important for Flask sessions/flashing
      # Optional: Set Flask environment to production (disables debug mode)
      # - FLASK_ENV=production
    # Define the restart policy for the container
    # 'unless-stopped': restarts the container unless it was explicitly stopped
    restart: unless-stopped
    # Optional: Mount local code for development (uncomment if needed)
    # This allows code changes to be reflected without rebuilding the image
    # volumes:
    #  - .:/app
  api:
    image: 1password/connect-api
    networks: [op-connect]
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    secrets:
      - source: credentials
        target: /home/opuser/.op/1password-credentials.json
        uid: "999"
        gid: "999"
        mode: 0400
    volumes:
      - data:/home/opuser/.op/data
    env_file: connect-api.env
    user: "999:999"

  sync:
    image: 1password/connect-sync
    networks: [op-connect]
    deploy:
      replicas: 1
      restart_policy:
        condition: any
    secrets:
      - source: credentials
        target: /home/opuser/.op/1password-credentials.json
        uid: "999"
        gid: "999"
        mode: 0400
    volumes:
      - data:/home/opuser/.op/data
    env_file: connect-sync.env
    user: "999:999"

volumes:
  data:

secrets:
  credentials:
    file: 1password-credentials.json
    name: credentials

networks:
  op-connect:
# Note: No external networks or volumes are defined as this is a simple single-service setup
# relying on environment variables for configuration.
